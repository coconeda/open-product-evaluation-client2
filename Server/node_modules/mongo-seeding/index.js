"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const common_1 = require("./common");
const database_1 = require("./database");
const data_processing_1 = require("./data-processing");
exports.seedDatabase = (partialConfig) => __awaiter(this, void 0, void 0, function* () {
    common_1.log('Starting...');
    const config = common_1.getConfig(partialConfig);
    const databaseConnector = new database_1.DatabaseConnector(new mongodb_1.MongoClient(), config.reconnectTimeoutInSeconds);
    try {
        let collections = new data_processing_1.DataPopulator(config.supportedExtensions).populate(config.inputPath);
        if (config.replaceIdWithUnderscoreId) {
            collections = new data_processing_1.DataTransformer().transform(collections, data_processing_1.DataTransformer.replaceDocumentIdWithUnderscoreId);
        }
        if (collections.length === 0) {
            common_1.log('No data to import. Finishing...');
            return;
        }
        const database = yield databaseConnector.connect({
            databaseConnectionUri: config.databaseConnectionUri,
            databaseConfig: config.database,
        });
        if (config.dropDatabase) {
            common_1.log('Dropping database...');
            yield database.drop();
        }
        yield new data_processing_1.DataImporter(database).import(collections);
    }
    catch (err) {
        throw wrapError(err);
    }
    finally {
        yield databaseConnector.close();
    }
    common_1.log('Finishing...');
});
const wrapError = (err) => {
    const error = new Error(`${err.name}: ${err.message}`);
    error.name = 'MongoSeedingError';
    return error;
};
//# sourceMappingURL=index.js.map