"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const common_1 = require("../common");
const _1 = require(".");
class DatabaseConnector {
    constructor(client, reconnectTimeoutInSeconds) {
        this.client = client;
        this.reconnectTimeoutInSeconds = reconnectTimeoutInSeconds;
    }
    connect({ databaseConnectionUri, databaseConfig, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let uri, databaseName;
            if (databaseConnectionUri) {
                uri = databaseConnectionUri;
                databaseName = this.getDbName(databaseConnectionUri);
            }
            else if (databaseConfig) {
                uri = this.getDbConnectionUri(databaseConfig);
                databaseName = databaseConfig.name;
            }
            else {
                throw new Error("You have to pass connection URI or database config object");
            }
            return this.connectWithUri(uri, databaseName);
        });
    }
    connectWithUri(dbConnectionUri, dbName) {
        return __awaiter(this, void 0, void 0, function* () {
            common_1.log(`Connecting to ${dbConnectionUri}...`);
            const startMillis = new Date().getTime();
            const reconnectTimeoutMillis = this.reconnectTimeoutInSeconds * 1000;
            this.currentDbName = dbName;
            let client;
            do {
                try {
                    client = yield mongodb_1.MongoClient.connect(dbConnectionUri, { ignoreUndefined: true });
                }
                catch (err) {
                    if (_1.checkTimeoutExpired(startMillis, reconnectTimeoutMillis)) {
                        throw new Error(`Timeout ${this.reconnectTimeoutInSeconds}s expired while connecting to database due to: ${err.name}: ${err.message}`);
                    }
                    common_1.log(`${err.message}\nRetrying...`);
                    yield _1.sleep(DatabaseConnector.SLEEP_INTERVAL_MILLIS);
                }
            } while (!client);
            common_1.log('Connection with database established.');
            this.client = client;
            const db = client.db(dbName);
            return new _1.Database(db);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            common_1.log('Closing connection...');
            if (!this.client || !this.client.isConnected(this.currentDbName)) {
                return;
            }
            yield this.client.close(true);
        });
    }
    getDbConnectionUri({ protocol, host, port, name, username, password, }) {
        let credentials = '';
        if (username) {
            credentials = `${username}${password ? `:${password}` : ''}@`;
        }
        return `${protocol}://${credentials}${host}:${port}/${name}`;
    }
    ;
    getDbName(dbConnectionUri) {
        const parts = dbConnectionUri.split('/');
        return parts[parts.length - 1];
    }
}
DatabaseConnector.SLEEP_INTERVAL_MILLIS = 500;
exports.DatabaseConnector = DatabaseConnector;
//# sourceMappingURL=DatabaseConnector.js.map