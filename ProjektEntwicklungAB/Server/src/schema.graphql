scalar Upload
scalar Date

type Query {
    """ Returns a list of Users """
    users : [User!]!


    """ Returns the specified User """
    user(_id : ID!) : User


    """ Returns a list of Surveys """
    surveys : [Survey!]!


    """ Returns the specified Survey """
    survey(_id : ID!) : Survey


    """ Returns the specified Question """
    question(_id : ID!) : Question


    """ Returns a list of EvaluationMethodTemplates """
    evaluationMethodTemplates : [EvaluationMethodTemplate!]!


    """ Returns the specified EvaluationMethodTemplate """
    evaluationMethodTemplate(_id : ID!) : EvaluationMethodTemplate


    """ Returns the specified Vote """
    vote(_id : ID!) : Vote


    """  Returns a list of Controllers """
    controllers : [Controller!]!


    """ Returns the specified Controller """
    controller(_id : ID!) : Controller


    """  Returns a list of Devices """
    devices : [Device!]!


    """ Returns the specified Device """
    device(_id : ID!) : Device


    """ Returns the specified ImageData """
    image(_id : ID!) : ImagePayload
}

type Mutation {
    """ Creates a User and returns the User data and AuthToken """
    createUser(data : UserCreateInput!) : UserCreatePayload!


    """ Updates the specified User and returns the User data """
    updateUser(data : UserUpdateInput!, _id : ID!) : UserUpdatePayload


    """ Deletes the specified User and returns the User data """
    deleteUser(_id : ID!) : UserDeletePayload


    """ Login and returns the Login data (User & AuthToken) """
    login(data : LoginInput!) : LoginPayload!


    """ Creates a Survey and returns the Survey data """
    createSurvey(data : SurveyCreateInput!) : SurveyCreatePayload!


    """ Updates the specified Survey and returns the Survey data """
    updateSurvey(data : SurveyUpdateInput!, _id : ID!) : SurveyUpdatePayload


    """ Deletes the specified Survey and returns the Survey data """
    deleteSurvey(_id : ID!) : SurveyDeletePayload


    """ Creates a Question and returns the Question data """
    createQuestion(data : QuestionCreateInput!, surveyID : ID!) : QuestionCreatePayload!


    """ Updates the specified Question and returns the Question data """
    updateQuestion(data : QuestionUpdateInput!, _id : ID!) : QuestionUpdatePayload


    """ Deletes the specified Question and returns the Question data """
    deleteQuestion(_id : ID!) : QuestionDeletePayload


    """ Creates a EvaluationMethodTemplate and returns the EvaluationMethodTemplate data """
    createEvaluationMethodTemplate(data : EvaluationMethodCreateInput!) : EvaluationMethodTemplateCreatePayload!


    """ Updates the specified EvaluationMethodTemplate and returns the EvaluationMethodTemplate data """
    updateEvaluationMethodTemplate(data : EvaluationMethodUpdateInput!, _id : ID!) : EvaluationMethodTemplateUpdatePayload


    """ Deletes the specified EvaluationMethodTemplate and returns the EvaluationMethodTemplate data """
    deleteEvaluationMethodTemplate(_id : ID!) : EvaluationMethodTemplateDeletePayload


    """ Creates a Vote and returns the Vote data """
    createVote(data : VoteCreateInput!, surveyID : ID!) : VoteCreatePayload!


    """ Creates a Controller and returns the Controller data """
    createController(data : ControllerCreateInput!, surveyID : ID) : ControllerCreatePayload!


    """ Updates the specified Controller and returns the Controller data """
    updateController(data : ControllerUpdateInput!, _id : ID!) : ControllerUpdatePayload


    """ Deletes the specified Controller and returns the Controller data """
    deleteController(_id : ID!) : ControllerDeletePayload


    """ Creates a Device and returns the Device data """
    createDevice(data : DeviceCreateInput!, controllerID : ID) : DeviceCreatePayload!


    """ Updates the specified Device and returns the Device data """
    updateDevice(data : DeviceUpdateInput!, _id : ID!) : DeviceUpdatePayload


    """ Deletes the specified Device and returns the Device data """
    deleteDevice(_id : ID!) : DeviceDeletePayload


    """ Uploads an image and returns the ImageData """
    createImage(image : Upload!, surveyID : ID!) : ImageCreatePayload!


    """ Deletes the specified ImageData and returns the ImageData """
    deleteImage(_id : ID!) : ImageDeletePayload
}

### User ###
""" TBD """
type User {
    _id : ID!
    creationDate : Date!
    lastUpdate : Date!
    firstname : String!
    lastname : String!
    email : String!
}

input UserCreateInput {
    firstName : String!
    lastName : String!
    email : String!
    password : String!
}

type UserCreatePayload {
    token : String!
    user : User!
}

input UserUpdateInput {
    firstName : String
    lastName : String
    email : String
    password : String
}

type UserUpdatePayload {
    user : User!
}

type UserDeletePayload {
    user : User!
}

input LoginInput {
    email : String!
    password : String!
}

type LoginPayload {
    token : String!
    user : User!
}


### Survey ###
""" Defines a survey """
type Survey {
    """ Unique surveyID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ Title of the survey """
    title : String!

    """ Description of the survey """
    description : String!

    """ Flag to determine if the survey can be displayed """
    active : Boolean! #TODO: Discuss if 2 api`s (client & admin)

    """ Flag to determine if everybody is allowed to display the survey """
    public : Boolean!

    """ All the questions of the survey """
    questions : [Question!]!

    """ All the votes of the survey """
    votes : [Vote!]!

    """ All the controllers of the survey """
    controller : [Controller!]!

    """ All the images (ImageData) of the survey """
    images : [ImageData!]!
}

input SurveyCreateInput {
    title : String!
    description : String = ""
    public : Boolean = false
}

type SurveyCreatePayload {
    survey: Survey!
}

input SurveyUpdateInput {
    title : String
    description : String
    active : Boolean
    public : Boolean
}

type SurveyUpdatePayload {
    survey : Survey!
}

type SurveyDeletePayload {
    survey : Survey!
}


### Question ###
""" Defines a question """
type Question {
    """ Unique questionID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ The survey this question belongs to """
    survey : Survey!

    """ The question text / the question itself """
    value: String!

    """ Optional: A description / extension of the question (help text) """
    description : String

    """ The question order / placement """
    sequence : Int!

    """ The method of evaluation """
    evaluationMethod : EvaluationMethod!

    """ The images related to this question """
    images : [ImageData!]!
}

input QuestionCreateInput {
    value : String!
    description : String
    sequence : Int!
    type : EvaluationMethodCreateInput!
    images : [ID!]
}

type QuestionCreatePayload {
    survey: Survey!
}

input QuestionUpdateInput {
    value: String
    description : String
    sequence : Int
    evaluationMethod : EvaluationMethodUpdateInput
    images : [ID!]
}

type QuestionUpdatePayload {
    survey : Survey!
}

type QuestionDeletePayload {
    survey : Survey!
}


### EvaluationMethod ###
""" Defines a template for an evaluation method """
type EvaluationMethodTemplate {
    """ Unique evaluationMethodTemplateID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ Type of the method (e.g. "Like" , "Favorite" etc.) """
    type : String!

    """ The size of every selectable step between minimum and maximum """
    stepSize : Float!

    """ The description of steps that are important for orientation / understanding (distributed in a linear way) """
    stepDescriptions : [StepDescription!]!

    """ Optional: The default value of the evaluation """
    default : Float

    """ The minimum value of the evaluation """
    min : Float!

    """ The maximum value of the evaluation """
    max : Float!
}

""" Defines a customized evaluation method """
type EvaluationMethod {
    """ Type of the method (e.g. "Like" , "Favorite" etc.) """
    type : String!

    """ The size of every selectable step between minimum and maximum """
    stepSize : Float!

    """ The description of steps that are important for orientation / understanding (distributed in a linear way) """
    stepDescriptions : [StepDescription!]!

    """ Optional: The default value of the evaluation """
    default : Float

    """ The minimum value of the evaluation """
    min : Float!

    """ The maximum value of the evaluation """
    max : Float!
}

input EvaluationMethodCreateInput {
    type : String!
    stepSize : Float!
    stepDescriptions : [StepDescriptionInput!]!
    default : Float
    min : Float!
    max : Float!
}

type EvaluationMethodTemplateCreatePayload {
    method : EvaluationMethodTemplate!
}

input EvaluationMethodUpdateInput {
    type : String
    stepSize : Float
    stepDescriptions : [StepDescriptionInput!]
    default : Float
    min : Float
    max : Float
}

type EvaluationMethodTemplateUpdatePayload {
    method : EvaluationMethodTemplate!
}

type EvaluationMethodTemplateDeletePayload {
    method : EvaluationMethodTemplate!
}

""" The description of steps that are important for orientation / understanding (distributed in a linear way) """
type StepDescription {
    """ The label of a step """
    value : String!

    """ The image that has to be shown for a step """
    image : ImageData

    """ The step order / placement """
    sequence : Int!
}

input StepDescriptionInput {
    value : String!
    image : ID
    sequence : Int!
}


### Vote ###
""" Defines a single vote for a survey """
type Vote {
    """ Unique voteID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ The controller a vote was send by """
    controller : Controller!

    """ The survey a vote belongs to """
    survey : Survey!

    """ A votes answers to all questions of the survey """
    answers : [Answer!]!
}

input VoteCreateInput {
    controller : ID!
    survey : ID!
    answers : [AnswerCreateInput!]!
}

type VoteCreatePayload {
    vote : Vote!
}

""" Defines the answer for a question """
type Answer {
    """ The question an answer belongs to """
    question : Question!

    """ The data that defines an answer """
    values : [AnswerData!]!

    """ The data that defines an answer in normalized format """
    normalized : [AnswerData!]!
}

input AnswerCreateInput {
    question : ID!
    values : [AnswerDataCreateInput!]!
}

""" The data that defines an answer """
type AnswerData {
    """ Optional: A related image that got rated """
    image : ImageData

    """ The value of an answer """
    value : Float!
}

input AnswerDataCreateInput {
    image : ID
    value : Float!
}


### Controller ###
""" Defines a controller representing a survey instance """
type Controller {
    """ Unique controllerID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ Unique id used to register a devices to this controller """
    connectionID : String!

    """ Optional: The active question displayed by the controller """
    activeQuestion : Question

    """ Optional: The active survey handled by the controller """
    activeSurvey : Survey

    """ All devices connected to the controller """
    devices : [Device!]!

    """ The name of the controller """
    name : String!
}

input ControllerCreateInput {
    activeSurvey : ID
    owner : ID #TODO: Ask if needed
    name : String!
}

type ControllerCreatePayload {
    controller : Controller!
}

input ControllerUpdateInput {
    activeQuestion : ID
    activeSurvey : ID
    name : String
    owner : ID #TODO: Ask if needed
}

type ControllerUpdatePayload {
    controller : Controller!
}

type ControllerDeletePayload {
    controller : Controller!
}


### Device ###
""" Defines an evaluation device """
type Device {
    """ Unique deviceID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ The name of the device """
    deviceName : String!

    """ The evaluation types the device can handle """
    type : [String!]!

    """ The controller the device is connected to """
    controller : Controller
}

input DeviceCreateInput {
    deviceName : String!
    type : [String!]!
    controller : ID
    owner : ID #TODO: Ask if needed
}

type DeviceCreatePayload {
    device : Device!
}

input DeviceUpdateInput {
    deviceName : String
    type : [String!]
    controller : ID
    owner : ID #TODO: Ask if needed
}

type DeviceUpdatePayload {
    device : Device!
}

type DeviceDeletePayload {
    device : Device!
}


### ImageData ###
""" Defines the data representing an image """
type ImageData{
    """ Unique imageID """
    _id : ID!

    """ Date of creation """
    creationDate : Date!

    """ Date of last update """
    lastUpdate : Date!

    """ The name of the image """
    filename : String!

    """ The mimetype of the image """
    type : String!

    """ The hash identifying the image """
    hash : String!
}

type ImagePayload {
    data : ImageData!
    url : String!
}

type ImageCreatePayload {
    image : ImagePayload!
}

type ImageDeletePayload {
    image : ImageData!
}